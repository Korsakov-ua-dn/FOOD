038 переключение межу табами бургер меню
window.addEventListener('DOMContentLoaded', () => {

    const tabs = document.querySelectorAll('.tabheader__item'),
          tabsContent = document.querySelectorAll('.tabcontent'),
          tabsParent = document.querySelector('.tabheader__items');
    
    function hideTabContent () {
        tabsContent.forEach(item => {
            item.style.display = 'none';
        });

        tabs.forEach(item => {
            item.classList.remove('tabheader__item_active');
        });
    }

    function showTabContent(i = 0) {
        tabsContent[i].style.display = 'block';
        tabs[i].classList.add('tabheader__item_active');
    }

    hideTabContent();
    showTabContent();

    tabsParent.addEventListener('click', (event) => {
        const target = event.target;

        if (target && target.classList.contains('tabheader__item')) {
            tabs.forEach((item, i) => {
                if (target == item) {
                    hideTabContent();
                    showTabContent(i);
                }
            });
        }
    });
});

039 Анимация, интервал и таймаут для выполнения скриптов
const btn = document.querySelector('.btn');
let timerId,
    i = 0;

function myAnimation () {
    const elem = document.querySelector('.box');
    let pos = 0;

    const id = setInterval(frame, 10);
    function frame () {
        if (pos == 300) {
            clearInterval(id);
        } else {
            pos++;
            elem.style.top = pos +"px";
            elem.style.left = pos +"px";
        }
    }
}

btn.addEventListener('click', myAnimation);

// function logger () {
//     if (i === 3) {
//         clearInterval(timerId);
//     }
//     console.log('text');
//     i++;
// }

// let id = setTimeout(function log() {
//     console.log('Hello');
//     id = setTimeout(log, 500);
// }, 500);

040 Работа с датами и временем
'use strict'

const now = new Date();

// console.log(now.getFullYear());
// console.log(now.getMonth());
// console.log(now.getDate());
// console.log(now.getDay()); // номер дня недели Пн - 1

// console.log(now.getHours()); // Местное время
// console.log(now.getUTCHours()); // +0 по гринвичу

// console.log(now.getTimezoneOffset()); // Разница между часовыми поясами в мин.
// console.log(now.getTime());

let start = new Date();

for (let i = 0; i < 100000; i++) {
    let some = i ** 3; // в ES7 ** - возводит в степень которая указана '3'
}

let end = new Date();

alert(`Цикл отработал за ${end - start} миллисекунд`)
// выводим в алерт время за которое отработал цикл

042 параметры документа, окна и работа с ними
'use strict'

const box = document.querySelector('.box');

const width = box.clientWidth.width;
const height = box.clientHeight.height;
console.log(width, height); /* отображает с учетом падингов но без ширины полосы прокрутки,
бордеров и марджинов */

const width = box.offsetWidth.width;
const height = box.offsetHeight.height;
console.log(width, height); /* отображает с учетом паддингов ширины полосы прокрутки 
бордеров и марджинов, но только видимую часть*/

const width = box.scrollWidth.width;
const height = box.scrollHeight.height;
console.log(width, height); /* без учета ширины полосы прокрутки но высоту 
всего проскролленного элемента*/

btn.addEventListener('click', ()=> {
    box.style.height = box.scrollHeight + 'px';

}); // Все предидущие значения нельзя изменить


console.log(box.scrollTop); /* сколько пикселей элемента уже было проскроллено
эту метрику можно изменять */

console.log(box.getBoundingClientRect().top); /* получаем все координаты элемента 
в виде объекта и можем использовать конкретное свойство .top*/

const style = window.getComputedStyle(box);
/* получаем все значения примененных css стилей к элементу,
 не путать с inline стилями */

console.log(style.display); // значение свойства display
console.log(document.documentElement.scrollTop);// то же действие для всего документа

window.scrollBy(0, 400) // скрол на 400px от текущей позиции
window.scrollTo(0, 400) // скрол на 400px от начала страницы

045 Функции конструкторы, создают объекты

function User(name, id) {
    this.name = name;
    this.id = id;
    this.human = true;
    this.hello = function() {
        console.log(`Hello ${this.name}`);
    };
}// функция конструирует новый объект

const ivan = new User('Ivan', 28);
const alex = new User('Alex', 30);

alex.hello();

// console.log(ivan);
// console.log(alex);

User.prototype.exit = function(name) {
    console.log(`Пользователь ${this.name} ушел`);
};// создаем новый метод у прототипа

ivan.exit();// работает только после создания метода у прототипа

046 Контекст вызова this
'use strict';
/* 1. Контекстом вызова обычной функции является window,
если 'use strict' то гтвукаштв
   2. this в конструкторах и классах - это новый экземпляр объекта
   3. ручная привязка this: call, apply, bind

const obj = {
    num: 5,
    sayNumber: function() {
        const say = () => {
            console.log(this);
        };
        say();
    }
};
obj.sayNumber();
/* контекст вызова this у обычной функции ссылается на объект внутри функции
   контекстом вызова у метода является сам объект
   контекстом вызова стрелочной функции будет ее родитель, своего нет
*/

const double = a => a * 2;/*тоже самое что и
const double = (a) {
    return a * 2;
};
Если стрелочная функция умещается на одной строке можно использ ее
укороченный вариант, так же если передается только один аргумент
можно записать без () */

btn.addEventListener('click', function() {
    this.style.backgroundColor = 'red';
});// this тоже самоечто event.target

function sayName(sername) {
    console.log(this);
    console.log(this.name + sername);
}
const user = {
    name: 'John'
};
sayName.call(user, 'Smith');
sayName.apply(user, ['Smith']);//тоже самое, разница в синтаксисе
/* функция преобрела контекст вызова благодаря методу call или apply
   ее контекстом стал объект user */

function count(num) {
    return this*num;
}
const double = count.bind(2);//bind создаеn новую фунцию к уже существующей
console.log(double(3));//d функцию double передаем один аргумент который будет удвоен

047 Классы, наследование
class Rectangle {
    constructor(height, width) {
        this.height = height;
        this.width = width;
    }
    calcArea() {
        return this.height * this.width;
    }
}
// const square = new Rectangle(10, 10);
// console.log(square.calcArea());

//Наследование классов, иерархия
class ColorRectangleWithText extends Rectangle {
    constructor(height, width, text, bgColor) {
        super(height, width);// просто() - все свойства родителя
        this.text = text;
        this.bgColor = bgColor;
    }
    showMyProps() {
        console.log(`Текст: ${this.text}, цвет: ${this.bgColor}`);
    }
}
const div = new ColorRectangleWithText(25, 10, 'jhjhfjdhf', 'red');
div.showMyProps();
console.log(div.calcArea());

049 оператор rest
const log = function(a, b, ...c) {
    console.log(a, b, c);
};
log('basic', 'rest', 'operator', 'usage');
/* оператор rest объединяет отдельные сущности в массив, если не передать ничего
то поумолчанию  rest оератор сформирует пустой масив */

057 методы перебора массива
Все кроме foreach возвращают новый массив или перезаписывают старый
filter - фильтрует по заданному условию
map изменяет элементы массива и возвращает новый массив например tolowercase
every/some - хотябы один или все элементы массивы соотв условию
reduce - схлопывает массив по указанному действию например сумма всех или умножение


065 Регулярные выражения
'use strict';

const ans =prompt('Введите ваше имя');

const reg = /n/ig;
console.log(reg.test(ans)); /*ответ true или false*/
// Классы:
// \d - ищем цифры
// \w - ищем буквы, слова
// \s - ищем пробелы

/* флаги
i - также и верхний регистр
g - 
m -
*/

// console.log(ans.search(reg)); ищет первый элемент соотв условию
// console.log(ans.match(reg));

const pass = prompt("Password");

// console.log(pass.replace(/./g, "*")); спецсимвол "." означает все элементы метод replace заменяет на *
// console.log(pass.replace(/\./g, "*")); обратный слеш говорит необходимо  искать именно "." а не все символы
// console.log('12-34-56'.replace(/-/g, ':')); замена дефисов на :

const str = 'My name is R2D2';
console.log(str.match(/\w\d\w\d/i));

// Обратные классы:
// \D не цифры
// \W не буквы

068 Геттеры и сеттеры свойства объекта 
свойства данные и свойства аксцессоры (get и set)
const persone = {
        name: 'Alex',
        age: 25,

        get userAge() {
            return this.age;
        },
        set userAge(num) {
            this.age = num;
        }
    };
    console.log(persone.userAge = 30);
    console.log(persone.userAge);

069 Инкапсуляция объекта js
'use strict';
class User {
    constructor(name, age) {
        this.name = name;
        this._age = age;
    }

    #surname = 'Petrychenko';

    say = () => {
        console.log(`Имя пользователя: ${this.name} ${this.#surname}, возраст ${this._age}`);
    }

    get age() {
        return this._age;
    }

    set age(age) {
        if (typeof age === 'number' && age > 0 && age < 110) {
            this._age = age;
        } else {
            console.log('Недопустимое значение!');
        }
    }
}

const ivan = new User('Ivan', 27);
// ivan.say();
const oleg = new User('Oleg', 36);
oleg.name = 111;
oleg._age = 90; //так изменять нельзя плохой тон
oleg.age = 23;
oleg.say();

070 модуль
(function(){}()); // анонимная самовызывающаясь функция с локальной областью видимости
// Ссамодостаточный модуль позволяет добиться эффекта инкапсуляции, все переменные не доступны в глобальном пространстве

const user = (function(){
    const privat = function() {
        console.log("I am privat!");
    }
    return {
        sayHello: privat
    }; // из анонимной функции возвращаем объект которому прописываем метод sayHello и в него передаем ссылку на функцию privat
}());
user.sayHello(); // получаем в консоль I am privat!

075 Нейтрализуем ошибки скрипта
 try {
        console.log('normal');
        console.log(a);
        console.log('steel normal');
    } catch(error) {
        console.log(error); // указывает причину ошибки
        // console.log(error.name); // ReferenceError
        // console.log(error.messege); // undefined
        // console.log(error.stack); // ReferenceError: a is not defined более подробно если скрипт большой
        console.log('error');
    } finally {} // код который обязательно выполнится (этот раздел не обязательный)
    console.log('ok'); /* в консоли 
    normal
    ReferenceError: a is not defined
    error
    ok */

076 Babel перевод кода из ES6+ в старый формат ES5
npm install --save-dev @babel/core @babel/cli @babel/preset-env
// устанавливаем отдельные кусочки пакета :
    core - основные функциональные единицы которые и будут проганять наш код
    cli - позволяет запускать babel из командной строки
    preset-env - пресет с настройками, env наиболее часто используемый
npm install --save @babel/polyfill
в package.json необходимо добавить зависимость
    "browserslist": [
    ">1%"
    ],
// сайт не работает использовал другую команду - npx browserslist ">1%" что то пошло не так!!!!

// в файле webpack.config.js
 module: {
    rules: [ // правила будут действовать
      {
        test: /\.m?js$/, // находим файлы .js]
        exclude: /(node_modules|bower_components)/, // файла которые нужно исключить
        use: { // как и что будем использовать
          loader: 'babel-loader', // связывет webpack с babel, установитт через npm!!!
          options: { // опции которые будут использоваться
            presets: [['@babel/preset-env', {
                debug: true, // позволяет во время компиляции увидеть что там происходит
                corejs: 3, // библиотека corejs
                useBuiltIns: "usage" // интеллектуально вбирает только те полифилы corejs которые используются в проекте
            }]]
          }
        }
      }
    ]
  } // какие модули будем использовать
  npm i --save-dev babel-loader
  npm i -save-dev core-js

// инсталяция дополнительных промисов вручную если остались какие то баги 
// например npm install es6-promise
// подключение автополифила запись первой строкой в script.js - require('es6-promise').polyfill();
// запускаем сборку webpack в результате файл bundle.js изменился в размере в три раза

079 Функции генераторы
function* generator() {
    yield 'S';
    yield 'c';
    yield 'r';
    yield 'i';
    yield 'p';
    yield 't';
}
const str = generator();
console.log(str.next()); // {S}
console.log(str.next()); // {c}
console.log(str.next()); // {r}
console.log(str.next().value); // i


function* count(n) {
    for (let i = 0; i < n; i++) {
        yield i;
    }
}
for (let k of count(7)) {
    console.log(k);
}

080 Анимация js
const btn = document.querySelector('.btn'),
      elem = document.querySelector('.box');  
let pos = 0;

// function myAnimation() {
//     let pos = 0;

//     const id = setInterval(frame, 10);
//     function frame() {
//         if (pos == 300) {
//             clearInterval(id);
//         } else {
//             pos++;
//             elem.style.top = pos + "px";
//             elem.style.left = pos + 'px';
//         }
//     }
// }

function myAnimation() {
    pos++;
    elem.style.top = pos + "px";
    elem.style.left = pos + 'px';

    if (pos < 300) {
        requestAnimationFrame(myAnimation);
    }
}

btn.addEventListener('click', () => requestAnimationFrame(myAnimation));

let id = requestAnimationFrame(myAnimation);
cancelAnimationFrame(id);